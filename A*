python
import heapq

class Node:
    def init(self, position, parent=None):
        self.position = position  # (x, y )
        self.parent = parent
        self.g = 0  # Cost from start to current node
        self.h = 0  # Heuristic cost to goal
        self.f = 0  # Total cost

    def lt(self, other):
        return self.f < other.f

def heuristic(a, b):
    # Manhattan distance
    return abs(a[0] - b[0]) + abs(a[1] - b[1] )

def astar(grid, start, end):
    open_list = []
    closed_set = set()

    start_node = Node(start)
    end_node = Node(end)

    heapq.heappush(openlist, startnode)

    while open_list:
        currentnode = heapq.heappop(openlist)
        closedset.add(currentnode.position )

        if currentnode.position == endnode.position:
            # Reconstruct path
            path = []
            while current_node:
                path.append(current_node.position)
                currentnode = currentnode.parent
            return path[::-1]  # Reverse path

        x, y = current_node.position
        neighbors = [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]

        for next_pos in neighbors:
            nx, ny = next_pos
            if nx < 0 or ny < 0 or nx >= len(grid) or ny >= len(grid[0]):
                continue  # Out of bounds
            if grid[nx][ny] == 1 or nextpos in closedset:
                continue  # Wall or already visited

            neighbor = Node(nextpos, currentnode)
            neighbor.g = current_node.g + 1
            neighbor.h = heuristic(nextpos, endnode.position)
            neighbor.f = neighbor.g + neighbor.h

            if any(opennode.position == neighbor.position and opennode.f <= neighbor.f for opennode in openlist):
                continue  # Better path already in open list

            heapq.heappush(open_list, neighbor)

    return None  # No path found

ðŸ§ª Example usage
if name == "main":
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0]
    ]

    start = (0, 0)
    end = (4, 4)

    path = astar(grid, start, end)
    if path:
        print("Path found : .")
        for step in path:
            print(Step)
    else:
        print(" No Path found.")
